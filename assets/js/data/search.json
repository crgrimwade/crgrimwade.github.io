[ { "title": "PN50 - Windows + Ubuntu", "url": "/posts/pn50/", "categories": "Operating Systems", "tags": "servers", "date": "2022-06-05 14:30:00 +0100", "snippet": "This post describes how to install a dual boot Windows and Ubuntu onto a PN50, this starts with the installation of Windows followed by the addition of Ubuntu. The PN50 in question has a 250G primary SSD and a 250G NVME drive.Installing WindowsDownload a copy of the windows installer and burn to a memory stick, insert into the PN50 and boot to the memory stick and follow the installation instructions to install this onto the NVME. Then boot into windows and shrink the windows partition to around 50G to make room for the Ubuntu installation.Installing UbuntuDownload ubuntu desktop iso image and use Rufus to load it onto a memory stick selecting GPT &amp;amp; UEFI mode.Boot to the memory stick and select install from the list of options. When the partition menu comes up select custom and create a new partition for ubuntu, select the partition marked as EFI as the location for the boot loader and complete the installation.Test that both Windows and Ubuntu can be accessed when booting.Post Installation for UbuntuAdd restricted items repositories to get proprietry drivers etc.sudo apt install ubuntu-restricted-extras # Install extra video codecs etc sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -yAdd alternative desktop themessudo add-apt-repository ppa:numix/ppasudo apt-get updatesudo apt-get install numix-gtk-theme numix-icon-theme-circleInstall Tweak Tool to enable downloading Gnome extensions via the browsersudo apt install gnome-tweak-tool # Can then download Gnome extensions via browserhttps://extensions.gnome.org/Numix Theme and Icons:Install various other bitssudo apt install synaptic # Install synaptic for fronting snap installatioms sudo apt install bleachbit # Bleachbit useful to clean once/twice a yearsudo apt install timeshift # Powerfull backup tool for system filessudo apt install preload # Useful for desktop - fully automatic learns your most used appsTweak Firefox - load Firefox and goto about:config set layers.acceleration.force-enabled and gfx.webrender.all Headless efibootmgr sudo apt-cache depends wpasupplicant apt-get download wpasupplicant libnl-route-3–200 libpcsclite1 copy to new machine dpkg -i wpasupplicant libnl-route-3–200 libpcsclite1 ls /sys/class/net cd /etc/netplan cp /etc/netplan/00-installer-config.yaml /etc/netplan/00.bak vim /etc/netplan/00-installer-config.yaml network: ethernetes: {} wifis: wlp2s0: dhcp4: true optional:true access-points: &quot;network_ssid_name&quot;: password: &quot;**********&quot; version: 2 renderer: networkd netplan --debug generate netplan apply reboot" }, { "title": "ProxMox", "url": "/posts/proxmox/", "categories": "Operating Systems", "tags": "servers", "date": "2022-06-05 13:50:00 +0100", "snippet": "ProxMox is a platform to host virtual machines and containers, in this configuration there are two machines each with an SSD and NVME drives. The hardware being used for both are HP mini format machines neither of which supports booting from the NVME so ProxMox has to be installed on the SSD.Installing ProxMoxDownload the latest proxmox from ProxMOx Downloads and burn to a memory stick. Boot to the memory stick and install the operating system.blahCreate/Join ClusterCreating and/or joining a cluster can only be done before any virtual machines or containers are created.Create the cluster on the first node and then login into the other node and join the cluster.Creating the ClusterLogin to the primary node and select the Datacenter then choose Cluster menu and click on Create Cluster and give it a nameJoining a ClusterLogin to the primary node and select the Datacenter then choose Cluster menu and click on Join Information then select Copy InformationLogin to an additional node and select the Datacenter then choose Cluster menu and click on Join Cluster then paste the information from the previous step enter the primary node password and select JoinPost InstallationThe following tweaks and other can be found on the Proxmox Helper Scripts web page. To execute select the proxmox node and stat a shell, then copy and execute the following commands.Replace the enterprise repositories with the no-subscription repositority, add the correct sources disable the subscription nag. Note that some of these activities can be achieved in the ProxMox UI.bash -c &quot;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/post-install-v3.sh)&quot;Set a Dark Mode Theme - use uninstall to removebash &amp;lt;(curl -s https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh ) installInstall UpdatesEnsure the repositories have been update as above then select the relevant node and select the Updates menu, then click on the Refresh button then when complete select the Upgrade optionTo update CT templates list run a shell and execute the pveam commandpveam updateAdding StorageLocal (NVME) StorageGoto disks and select the NVME disk and select Wipe Disk to clean it and then select Initialise Disk with GPTThen select ZFS and then Create ZFS give it a name e.g. NVME1 then select the device accept the defaults and select CreateNote: ZFS disk names need to be unique across the cluster - consider adding the node number to the ZFS name.Partition an LVM (type 8e) partition using fdisk - e.g. /dev/sdb3Prepare partition - pvcreate /dev/sdb3Add partition to the pve group - vgextend pve /dev/sdb3Extend the LVM-Thin pool - lvextend -L+10G pve/datac`Remote (NAS) Storageselect datacentre-&amp;gt;storage-&amp;gt;add-&amp;gt;NFSID Choose a nameServer = IP Addrees of NASExport = Select NAS folder to mountContent = Select storage types e.g. Disk Image,BackupSetting to use DHCPvi /etc/network/interfaceschange static to dhcp and comment out the address and gateway lines and rebootCheck https://tteck.github.io/Proxmox/ for some additional stuff" }, { "title": "Cheatsheet", "url": "/posts/mdcheatsheet/", "categories": "test", "tags": "test", "date": "2022-06-05 13:31:00 +0100", "snippet": "Markdown Cheat SheetThanks for visiting The Markdown Guide!This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.Basic SyntaxThese are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements.HeadingH1H2H3Boldbold textItalicitalicized textBlockquote blockquoteOrdered List First item Second item Third itemUnordered List First item Second item Third itemCodecodeHorizontal RuleLinkMarkdown GuideImageExtended SyntaxThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.Table Syntax Description Header Title Paragraph Text Fenced Code Block{ &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25}FootnoteHere’s a sentence with a footnote. 1Heading IDMy Great HeadingDefinition List term definitionStrikethroughThe world is flat.Task List Write the press release Update the website Contact the mediaEmojiThat is so funny! :joy:(See also Copying and Pasting Emoji)HighlightI need to highlight these ==very important words==.very important words.SubscriptH~2~OSuperscriptX^2^This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote2, and here is another footnote3.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo &quot;The command was not successful.&quot;; #do the needful / exitfi;Specific filename@import &quot;colors/light-typography&quot;, &quot;colors/dark-typography&quot;Reverse Footnote This is the footnote. &amp;#8617; The footnote source &amp;#8617; The 2nd footnote source &amp;#8617; " }, { "title": "Kubernetes", "url": "/posts/kubernetes/", "categories": "Operating Systems", "tags": "servers", "date": "2022-06-05 13:30:00 +0100", "snippet": "InstallationThis is my setup for creating a 4 node kubernetes cluster.PreparationInstall a 64 bit Rasbian and boot the Raspberry Pi and as root do the followingsudo iptables -F sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacysudo update-alternatives --set iptables /usr/sbin/iptables-legacy rebootMasterOn the master node install kubernetes and extract the node tokencurl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=&quot;644&quot; sh -s -cat /var/lib/rancher/k3s/server/node-tokenWorkerOn each worker nodes install kubernetes replace master-ip with the IP address of the master node, node-name with the name of the worker node and master token with the token in the previous stepcurl -sfL https://get.k3s.io | K3S_TOKEN=&quot;master-token&quot; K3S_URL=&quot;https://master-ip:6443&quot; K3S_NODE_NAME=&quot;node-name&quot; sh - Rancher Install Rancher see docker stuff or ... mkdir -p /etc/rancher/rke2 cd /etc/rncher/rke2 vi config.yaml #token: mylittlepony #tls-san: # - 192.168.1.34 curl -sfL https://get.rancher.io | sh - rancherd --help systemctl enable rancherd-server.service systemctl start rancherd-server.service journalctl -eu rancherd-server -f rancherd reset-admin # It might take some time for this to work Use the rancher console add cluster - type other - give it a name and continue Copy the line at the bottom of the screen and paste it into the master node - try until if works Back in rancher select the three dots and view api and select edit rancher/rancher-agent:v2.5.8-linux-arm64 Kubernetes Stuff minikube &amp;amp; kubectl https://docs.gitlab.com/charts/development/minikube/ install https://kubernetes.io/docs/home/ sudo apt-get update sudo apt-get install apt-transport-https sudo apt-get upgrade wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 chmod +x minikube-linux-amd64 sudo mv minikube-linux-amd64 /usr/local/bin/minikube minikube version curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl kubectl version -o json Test kubectl create deployment hello-k8s --image=geerlingguy/kube101:intro kubectl expose deployment hello-k8s --type=NodePort --port=280 kubectl get services hello-k8s minikube ip # Use ip from minikube + port from get services or ... minikube service hello-k8s # Will launch broswer minikube delete Create Secrets to use github In github create an access token - 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 Either: This method needs a secret per registry kubectl create secret docker-registry regcred --docker-server=docker.pkg.github.com --docker-username=crgrimwade --docker-password=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 Or: This method can use the same secret for mulitple regisry - login to each registry before copying the json file minikube ssh # We need to login to github from withing minikube and creae the .docker/config.json file echo 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 | docker login docker.pkg.github.com -u crgrimwade --password-stdin exit scp -i $(minikube ssh-key) docker@$(minikube ip):.docker/config.json config.json # get the config.json files kubectl create secret generic regcred --from-file=.dockerconfigjson=config.json --type=kubernetes.io/dockerconfigjson kubectl get secret kubectl get secret -o yaml Useful commands minikube start kubectl cluster-info kubectl config view kubectl get nodes minikube ssh minikube stop minikube delete minikube addons list minikube dashboard --url minikube delete eval $(minikube docker-env) # Will target docker commands to use minikube instead of the host docker go example sudo snap install go example go app create dir - mkdir -p cmd/hello initialise go module: go mod init cmd/hello vi cmd/hello/hello.go #package main # #import ( # &quot;fmt&quot; # &quot;log&quot; # &quot;net/http&quot; #) # #func HelloServer(w http.ResponseWriter, r *http.Request) { # fmt.Fprintf(w, &quot;Hello, you requested %s&quot;, r.URL.Path) # log.Printf(&quot;Received request for path: %s&quot;, r.URL.Path) #} # #func main() { # var addr string = &quot;:8180&quot; # handler := http.HandlerFunc(HelloServer) # log.Printf(&quot;Starting webserver on %s&quot;, addr) # if err := http.ListenAndServe(addr, handler); err != nil { # log.Fatalf(&quot;Could not listen on port %s %v&quot;, addr, err) # } #} vi cmd/hello/hello_test.go #package main # #import ( # &quot;net/http&quot; # &quot;net/http/httptest&quot; # &quot;testing&quot; #) # #func TestGetHello(t *testing.T) { # t.Run(&quot;Returns current path&quot;, func(t *testing.T) { # request, _ := http.NewRequest(http.MethodGet, &quot;/testing&quot;, nil) # response := httptest.NewRecorder() # # HelloServer(response, request) # # got := response.Body.String() # want := &quot;Hello, you requested: /testing&quot; # # if got != want { # t.Errorf(&quot;got %q, want %q&quot;, got, want) # } # }) #} cd cmd/hello ; go run . or go run cmd/hello/hello.go cd cmd/hello ; go test vi dockerfile #FROM golang:1-alpine as build #WORKDIR /app #COPY cmd cmd #RUN go build cmd/hello/hello.go # #FROM alpine:latest #WORKDIR /app #COPY --from=build /app/hello /app/hello #EXPOSE 8180 #ENTRYPOINT [&quot;./hello&quot;] docker build -t crgrimwade/hello . docker images using github authenticate create github access token - e.g. ghp_zFmWmp1pDYCGKCMeq4er3DzkM9Vaya2E2gmq export CR_PAT=ghp_zFmWmp1pDYCGKCMeq4er3DzkM9Vaya2E2gmq login to create .docker/config.json # Login in to all git providers echo $CR_PAT | docker login docker.pkg.github.com -u crgrimwade --password-stdin echo $CR_PAT | docker login ghcr.io -u crgrimwade --password-stdin push # As a generic image docker tag hello ghcr.io/crgrimwade/hello/hello:v1 docker push ghcr.io/crgrimwade/hello/hello:v1 docker rmi ghcr.io/crgrimwade/hello/hello:v1 # As a docker image docker tag hello docker.pkg.github.com/crgrimwade/hello/hello:v docker push docker.pkg.github.com/crgrimwade/hello/hello:v1 docker rmi docker.pkg.github.com/crgrimwade/hello/hello:v1 pull Either - use command lines .... kubectl create deployment hello-go --image=docker.pkg.github.com/crgrimwade/hello/hello:v1 # This will fail for a private registry due to no authorisation use below to examine cause watch kubectl get deployment hello-go kubectl get pod -l app=hello-go kubectl describe pod -l app=hello-go # To fix kubectl edit deployment hello-go # under template: spec: add the following #spec: #After this tag # imagePullSecrets: # Add these tags # -name: regcred # containers: # Before this tag Save and exit - the pod will the load Or -using a deployment yaml vi hello-go-dep.yaml #apiVersion: apps/v1 #kind: Deployment #metadata: # name: hello-go-deployment #spec: # selector: # matchLabels: # app: hello-go # replicas: 1 # template: # metadata: # labels: # app: hello-go # spec: # imagePullSecrets: # -name: regcred # containers: # -name: hello-go # image: docker.pkg.github.com/crgrimwade/hello/hello:v1 # kubectl apply -f hello-go-dep.yaml upgrade/downgrade versions kubectl set image deployment/hello-go hello-go=docker.pkg...:v2 kubectl rollout history deployment hello-go kubectl rollout undo deployment hello-go x kubectl logs -f app=hello-go" }, { "title": "Pi Hole", "url": "/posts/pihole/", "categories": "Ad Blocker", "tags": "docker", "date": "2022-06-05 13:00:00 +0100", "snippet": "Pi-Hole provides a combinations of ad-blocking and protection from malicious sites. It does this by intercepting all name lookups and comparing them to a defined list of sites and if the lookup matches one on its blacklist it blocks the lookup. For any “local” lookups (i.e. without a full domain name e.g. myhost or with a local domain name e.g. myhost.localdomain) it will forward the request to a local DNS server - usually the router. For any non local FQDNs e.g. google.co.uk it will forward to the outside world - in this installation that uses unbound which goes direct to the root DNS servers rather than to your internet provider or google, this helps prevent those organisations controlling what you can see and using your lookups for their marketting goals.Preparation Step 1 - Freeing up port 53DNS lookups use specified default ports - in some linux e.g. ubuntu installations these ports have dummy dns configurations so we need to make sure these are clear before setting up Pi-Hole. In my setup on the NAS this step is not required. First check if the port is in use, then if it is reconfigure the resolv.conf file in /etclsof -nP -iTCP -sTCP:LISTEN # Check if port 53 is already in use.cd /etcrm resol.confln -s ../run/systemd/resolve/resolv.conf /etc/resolv.confsed -r -i.orig &#39;s/#?DNSStubListener=yes/DNSStubListener=no/g&#39; /etc/systemd/resolved.confsystemctl restart systemd-resolved.servicePreparation Step 2 - Increasing the available memoryTemporary fix - lost after rebootsysctl -w net.core.rmem_max=1048576sysctl -w net.core.wmem_max=1048576To make it permanentecho &quot;net.core.rmem_max=1048576&quot; &amp;gt;/etc/sysctl.d/local.confecho &quot;net.core.wmem_max=1048576&quot; &amp;gt;&amp;gt;/etc/sysctl.d/local.confInstalling Pi-Hole and Unbound in DockerUse the docker compose file at the bottom of the post to create a docker stack with two containers pihole and unbound make sure to adjust the volumes to map to your intallation and configure the docker network, timezone and passwords etc. When complete start the stack - this will create various configurations within the mounted volumes.Configuring UnboundUnbound needs to know how to forward requests from Pi-Hole out to the internet, avoiding those DNS servers that track your activity - such as google. The following actions should be done in the /opt/unbound/etc/unbound folder of the unbound docker container or in the host folder to which it is mapped e.g. /volume1/Docker/unboundFirst Fetch the root.hints file - this file will contain IPv6 details which can optionally be commented out - do this for any line with an AAAA type record.wget -O root.hints https://www.internic.net/domain/named.rootNext create an a-records.conf file with the following contents:# A Record#local-data: &quot;somecomputer.local. A 192.168.1.1&quot;# PTR Record#local-data-ptr: &quot;192.168.1.1 somecomputer.local.&quot;Then finally edit the unbound.conf file - see pihole documentation for more detailsand an example of this file can be found at the end of this post.Configuring Pi-HoleWe need to tell Pi-Hole to forward requests within our local IP ranges to our local DNS server (typically our router). Access the Pihole GUI (hostname:82/admin) and in the DNS tab of settings configure the following: enable - Never forward non-FQDNs enable - Never forward reverse lookups for private IP ranges disable - Use DNSSEC enable - Use Conditional Forwarding Local networks - set to your network e.g. `192.168.1.0/24 Ip address of your DHCP server - typically the address of your router Localdomain - set this to whatever your router/DHCP server uses to qualify local names e.g. localdomainWhen all the configurationis complete test the Pi-Hole DNS resolution - see below for how to test DNS. If/When all the testing is succesful configure your router to tell its clients to use Pi-Hole for their primary DNS resolution and the router as a secondary DNS server.Adding BlocklistsThen populate the blocklists for sites that should be avoided - see FireBog for potential lists. Goto Addlists in the Group Management menu to add lists. Copy the URL from FireBig to PiHole to add a list.Always update gravity after changing the blocklists - this can be found under the Tools menu.Firebog has lots of different list categories covering malicious sites to simply those that use trackers. In general add any malicious sites then choose what else to add. Note adding advertisment list can speed up page loads for ad heavy web pages and blocks some annoying youtube overlay ads (but not the full clips ones).Testing PiHole and UnboundUnboundUse dig to send requests to the unbound container on port 5053 - this tests that unbound is correctly forwarding DNS requests to the root servers. Check the docker logs to look for any issuesdig www.google.com @unbound-host -p 5053 # Replace unbound-host with the relevant unbound IP addressPiHoleUse dig to test PiHoles DNS resolutiondig www.google.com @pi-host -p 53 # Replace pi-host with the relevant unbound IP addressThen with nslookup test various scenariosnslookup google.co.uk # Test with default servernslookup google.co.uk router # Test with router as servernslookup google.co.uk pi-host # Test using Pi-Hole as servers# Test local lookups: Compare results, check that Pi-Hole sends requests to routernslookup plexserver # Test with default servernslookup plexserver router # Test with router as servernslookup plexserver pi-host # Test using Pi-Hole as serversKnown Issues Known Issue: { DNS resolution is currently unavailable when starting pihole Make sure the host system of Pi-Hole is NOT using Pi-Hole for DNS Happens if the docker host is using pihole as its only name resolution (check /etc/resolv.conf) - recommendation that everyone add --dns 127.0.0.1 --dns 1.1.1.1 to their docker run commands in order to avoid these types of errors not managed to get the above to work yet - Just add &quot;nameserver 192.168.1.1&quot; to start of /etc/resolv.conf (change IP to that of the router) restart pihole container - Might be able to remove this afterwards, but likely need to re-add to restart pihole might be possible to add as second item and leave in - needs further investigation - apt install resolvconf systemctl start resolvconf.service systemctl enable resolvconf.service vi /etc/resolvconf/resolv.conf.d/head # add nameserver 8.8.8.8 Unbound.conf File# If no logfile is specified, syslog is used# logfile: &quot;/var/log/unbound/unbound.log&quot;verbosity: 0access-control: 172.16.0.0/12 allowaccess-control: 127.0.0.0/8 allowaccess-control: 10.0.0.0/8 allowaccess-control: 192.168.0.0/16 allowinterface: 0.0.0.0port: 5053 # Make sure this matches the unbound configuration in docker-compose.ymldo-ip4: yesdo-udp: yesdo-tcp: yes# May be set to yes if you have IPv6 connectivitydo-ip6: no# You want to leave this to no unless you have *native* IPv6. With 6to4 and# Terredo tunnels your web browser should favor IPv4 for the same reasonsprefer-ip6: no# Use this only when you downloaded the list of primary root servers!# If you use the default dns-root-data package, unbound will find it automatically#root-hints: &quot;/var/lib/unbound/root.hints&quot;root-hints: /opt/unbound/etc/unbound/root.hints# Trust glue only if it is within the server&#39;s authorityharden-glue: yes# Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUSharden-dnssec-stripped: yes# Don&#39;t use Capitalization randomization as it known to cause DNSSEC issues sometimes# see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further detailsuse-caps-for-id: no# Reduce EDNS reassembly buffer size.# Suggested by the unbound man page to reduce fragmentation reassembly problemsedns-buffer-size: 1472# Perform prefetching of close to expired message cache entries# This only applies to domains that have been frequently queriedprefetch: yes# One thread should be sufficient, can be increased on beefy machines. In reality for most users# running on small networks or on a single machine, it should be unnecessary to seek performance# enhancement by increasing num-threads above 1.num-threads: 1# Ensure kernel buffer is large enough to not lose messages in traffic spikesso-rcvbuf: 1m#unbound_anchorflags: &quot;-4&quot;# Ensure privacy of local IP rangesprivate-address: 192.168.0.0/16private-address: 169.254.0.0/16private-address: 172.16.0.0/12private-address: 10.0.0.0/8private-address: fd00::/8private-address: fe80::/10#plexprivate-domain: plex.directDocker Compose Fileversion: &quot;3.0&quot; networks: dns_net: driver: bridge ipam: config: - subnet: 172.27.0.0/16 # Pick a subnet that is not already in useservices: pihole: container_name: pihole hostname: pihole image: pihole/pihole:latest restart: unless-stopped networks: dns_net: ipv4_address: 172.27.0.6 # Pick an address in the above subnet ports: - 53:53/tcp - 53:53/udp - 67:67/udp - 180:80/tcp # Choose an available port - 1443:443/tcp volumes: - /volume1/Docker/pihole/pihole:/etc/pihole - /volume1/Docker/pihole/dnsmasq:/etc/dnsmasq.d environment: - TZ=&quot;Europe/London&quot; # Select your timezon - WEBPASSWORD=password # Dont forget to set a password - DNS1=172.27.0.7#5053 # Use the address/port configured for unbound below - DNS2=no unbound: container_name: unbound image: mvance/unbound:latest restart: unless-stopped networks: dns_net: ipv4_address: 172.27.0.7 # Pick an address in the above subnet ports: - 5053:5053/tcp # Use this port in PiHole above - 5053:5053/udp volumes: - /volume1/Docker/unbound:/opt/unbound/etc/unbound healthcheck: disable: true" }, { "title": "Rasbian OS", "url": "/posts/rasbian/", "categories": "Operating Systems", "tags": "servers, pi", "date": "2022-06-04 13:00:00 +0100", "snippet": "Installing Rasbian OSInstructions for setting up Rasbian on a Raspberry Pi.Install From ScratchClean up the SD Card - Remove all partitions and format as FAT32 then download and install and run the latest Pi Imager. In the imager press CTRL+SHIFT+X to bring up special settings and set the following: hostname ssh pi user password timezone keyboard WiFi SSID and passcodeSelect the preferred OS and write to the SD - insert the SD into the Pi and boot.Note: This can also be used to write to an NVME card.Install From an ImageUse Win32DiskImager to load a previously saved imagePost InstallationPlug in SD/SSD card and boot then update the softwaresudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -yTo remove plain text WiFi password run the wpa_passphrase to get an encrypted entry to put in the wpa_supplicant file.wpa_passphrase &amp;lt;SSID&amp;gt; &amp;lt;PSK&amp;gt;For example wpa_passphrse wifssid passphrase will give somthing like:network={ ssid=&quot;wifissid&quot; #psk=&quot;passphrase&quot; psk=452f4f6194d1dbc368f7cef6ec09ffd74a4073b62bc6ba4afea97035c4e70d85}If using ArgonOneInstall the power button and fan controlsudo curl https://download.argon40.com/argon1.sh | bash # To set power button and fan controlargonone-config # To change fan settingsOpional bit if the pi will be a Kubernetes node Optionally for a Kubernetes node - edit cmdline.txt add cgroup_enable=memory ip=192.168.1.xx::192.168.1.1:255.255.255.0:kube-1:eth0:off " }, { "title": "Jekyll", "url": "/posts/jekyll/", "categories": "documentation", "tags": "guides", "date": "2022-06-03 18:00:00 +0100", "snippet": "What is JekyllJekyll is a static site generator that transforms your plain text into beautiful static web sites and blogs. It can be use for a documentation site, a blog, an event site, or really any web site you like. It’s fast, secure, easy, and open source. It’s also the same site generator I use to maintain my open source documentation. Today, we’ll be installing and configuring Jekyll using the Chirpy theme. We configure the site, create some pages with markdown, automatically build it with a GitHub action and even host it for FREE on GitHub pages. If you don’t want to host in the cloud, show how to host it on your own server or even in Docker.Thanks goes to Techno Tim on which this is basedInstall Dependenciessudo apt updatesudo apt install ruby-full ruby-bundler build-essential zlib1g-dev gitTo avoid installing RubyGems packages as the root user:echo &#39;# Install Ruby Gems to ~/gems&#39; &amp;gt;&amp;gt;~/.bashrcecho &#39;export GEM_HOME=&quot;$HOME/gems&quot;&#39; &amp;gt;&amp;gt;~/.bashrcecho &#39;export PATH=&quot;$HOME/gems/bin:$PATH&quot;&#39; &amp;gt;&amp;gt;~/.bashrcsource ~/.bashrcInstall Jekyll bundlergem install jekyll bundlerInitialising GITCreate directory ~/.sshGet copies of id_rsa and id_rsa.pub and put in ~/.ssh and set permissions to 600 git config --global user.email &quot;your.email@gmail.com&quot; git config --global user.name &quot;github username&quot;Creating a site based on Chirpy StarterVisit https://github.com/cotes2020/jekyll-theme-chirpy#quick-start scroll down and select “Chirpy Starter” in step one.When the create repo page is displayed set the repo name to username.github.io and set to public if yu intend to host this in GIT.After creating a site based on the template, clone your repo and setup the bundle dependenciesgit clone git@&amp;lt;YOUR-USER-NAME&amp;gt;/&amp;lt;YOUR-REPO-NAME&amp;gt;.gitcd reponamebundleEdit the _config.yml file and configure the following:timezone: Europe/London # Set your timezonetitle: My Title # the main titletagline: My Installation Notes # Set tagline - it will display as the sub-titledescription: &amp;gt;- # used by seo meta and the atom feed A minimal, responsive, and powerful Jekyll theme for presenting professional writing.url: &#39;https://githubuser.github.io&#39; # Set url to the github reponamegithub: username: githubuser # change to your github usernameCreate Some PostsPosts are created in files (in ~reponame/_posts) with the following nameing format yyyy-mm-dd-filename.md each file must include thefollowing header structure---title: Installing Jekylldate: 2022-06-03 10:00:00 -500categories: [documentation]tags: [servers,dell]---To see how to create markdown visit Markdown GuideWhen done publish back to GIT bygit statusgit add .git statusgit commit -m &quot;made some changes&quot;git pushLocal Test ServerRun a temporary server to view the content default url is http://localhost:4000bundle exec jekyll s --host host-ip --port portnumGitHub ServerIn the repository in github select settings - then pages (on the left) and change the source from “main” to “gh-pages” the URL for the github hosted pages will be https://githubuser.github.io/Local HostingFirst build the site pages using the command below - this creates the “website” in the ~/reponame/_sites folder which can then be copied into webserver such as ngnix.JEKYLL_ENV=production bundle exec jekyll bCreate a file in _posts with the formatYEAR-MONTH-DAY-title.MARKUPFor example:2022-05-23-homelab-docs.md2022-05-34-hardware-specs.mdLocal Linking of FilesImage from asset:... which is shown in the screenshot below:![A screenshot](/assets/screenshot.jpg)Linking to a file... you can [download the PDF](/assets/diagram.pdf) here.See more post formatting rules on the Jekyll siteMarkdown ExamplesIf you need some help with markdown, check out the markdown cheat sheetI have lots of examples in my documentation site repo. Just click on the Raw button to see the code behind the page.For more neat syntax for the Chirpy theme check their demo page on making posts https://chirpy.cotes.page/posts/write-a-new-post/LinksSee reference repo for files" } ]
